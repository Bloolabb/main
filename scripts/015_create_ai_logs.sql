-- Create table for AI interaction logs with enhanced security
CREATE TABLE IF NOT EXISTS public.ai_interaction_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    message TEXT NOT NULL,
    response TEXT NOT NULL,
    age_group TEXT NOT NULL CHECK (age_group IN ('6-9', '10-12', '13-16')),
    success BOOLEAN DEFAULT true,
    api_used TEXT NOT NULL CHECK (api_used IN ('openrouter', 'gemini')),
    tokens_used INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL
);

-- Create table for AI error logs
CREATE TABLE IF NOT EXISTS public.ai_error_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    error TEXT NOT NULL,
    request_data JSONB,
    stack TEXT,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL
);

-- Create table for content moderation logs
CREATE TABLE IF NOT EXISTS public.content_moderation_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    input_text TEXT NOT NULL,
    flagged_categories TEXT[],
    moderation_score DECIMAL(3,2),
    was_blocked BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS ai_interaction_logs_user_id_idx ON public.ai_interaction_logs(user_id);
CREATE INDEX IF NOT EXISTS ai_interaction_logs_created_at_idx ON public.ai_interaction_logs(created_at);
CREATE INDEX IF NOT EXISTS ai_interaction_logs_age_group_idx ON public.ai_interaction_logs(age_group);
CREATE INDEX IF NOT EXISTS ai_error_logs_timestamp_idx ON public.ai_error_logs(timestamp);
CREATE INDEX IF NOT EXISTS ai_error_logs_user_id_idx ON public.ai_error_logs(user_id);
CREATE INDEX IF NOT EXISTS content_moderation_logs_user_id_idx ON public.content_moderation_logs(user_id);
CREATE INDEX IF NOT EXISTS content_moderation_logs_created_at_idx ON public.content_moderation_logs(created_at);

-- Set up RLS policies
ALTER TABLE public.ai_interaction_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_error_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.content_moderation_logs ENABLE ROW LEVEL SECURITY;

-- Strict RLS policies for ai_interaction_logs
CREATE POLICY "Users can only view their own interaction logs" ON public.ai_interaction_logs
    FOR SELECT TO authenticated
    USING (user_id = auth.uid());

CREATE POLICY "Service can insert interaction logs" ON public.ai_interaction_logs
    FOR INSERT TO service_role
    WITH CHECK (true);

CREATE POLICY "No updates allowed to interaction logs" ON public.ai_interaction_logs
    FOR UPDATE TO authenticated
    USING (false);

CREATE POLICY "No deletes allowed to interaction logs" ON public.ai_interaction_logs
    FOR DELETE TO authenticated
    USING (false);

-- Strict RLS policies for ai_error_logs (admin only)
CREATE POLICY "Only admins can view error logs" ON public.ai_error_logs
    FOR SELECT TO authenticated
    USING (EXISTS (
        SELECT 1 FROM auth.users 
        WHERE auth.users.id = auth.uid() 
        AND auth.users.raw_user_meta_data->>'role' = 'admin'
    ));

CREATE POLICY "Service can insert error logs" ON public.ai_error_logs
    FOR INSERT TO service_role
    WITH CHECK (true);

-- Strict RLS policies for content_moderation_logs (admin only)
CREATE POLICY "Only admins can view moderation logs" ON public.content_moderation_logs
    FOR SELECT TO authenticated
    USING (EXISTS (
        SELECT 1 FROM auth.users 
        WHERE auth.users.id = auth.uid() 
        AND auth.users.raw_user_meta_data->>'role' = 'admin'
    ));

CREATE POLICY "Service can insert moderation logs" ON public.content_moderation_logs
    FOR INSERT TO service_role
    WITH CHECK (true);

-- Create function to get user age group
CREATE OR REPLACE FUNCTION get_user_age_group(user_id UUID)
RETURNS TEXT AS $$
DECLARE
    user_age INTEGER;
BEGIN
    -- Assuming you have a birth_date field in user_metadata or a profiles table
    SELECT EXTRACT(YEAR FROM AGE(NOW(), (raw_user_meta_data->>'birth_date')::DATE))::INTEGER
    INTO user_age
    FROM auth.users
    WHERE id = user_id;
    
    RETURN CASE
        WHEN user_age BETWEEN 6 AND 9 THEN '6-9'
        WHEN user_age BETWEEN 10 AND 12 THEN '10-12'
        WHEN user_age BETWEEN 13 AND 16 THEN '13-16'
        ELSE '13-16' -- Default fallback
    END;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;